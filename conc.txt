## How does it work?

It uses Astro Content Collections just like we use `settings.yml`, `content.yml` and `faqs.yml`.

This means every collection is treated as an entrypoint in the CMS.

The necessary config to integrate this is done at `astro.config.mjs`.

## How does config work?

Inside `astro.config.mjs` at `export default defineConfig({ integrations: [...] )}` we need to set:

```
NetlifyCMS({
      config: {
        backend: {
          name: 'git-gateway',
          branch: 'master',
        },
        collections: [
            {
                name: 'Cities',
                label: 'Cities Content',
                folder: 'src/content/city',
                filter: {field: "filter", value: "city"},
                create: true,
                delete: true,
                slug: "{{fields.name}}",
                fields: [
                    { name: 'name', widget: 'string', label: 'City Name' },
                    { name: 'language', widget: 'string', label: 'Language' },
                    { name: 'info', widget: 'markdown', label: 'City Info' }
                ],
            },
        ],
      },
    }),

```
We can see two main properties, backend and collections. We will take a look the options inside collecitons:

The main options we have to consider are `create: true`, `delete: true` and `slug: "{{fields.name}}"`. Create and Delete properties allow us to enable/disable item creation inside the collection, and slug works just like field summary we have been using in `landings-cms > landing-* > config.json`.

We have also set `filter: {field: "filter", value: "city"}` as a workaround to use nested content-collections which is not a possible option by default. By default we would have needed to set manually all possible collections. Let's see what nested collections can look like:

```
├── public/
├── src/
│   ├── content/
│       ├── city/
│           └── en/
│               └── madrid.md
│           └── fr/
│               └── paris.md
```

Finally, fields property is an array of objects with the default NetlifyCMS options we know `name: ...`, `label: ...` ...
Be careful to set the same name in fields config to the field in markdown.

## How are new collections created?

If `create: true`, users will be able to add new items inside a collection.

By setting a slug just like mentioned before, we can set field value as file name.

## How are changes made?

This works as expected, the value from the modified field is updated. In workflow by default we have three options:

```
- Publish now
- Publish and create new
- Publish and duplicate
```

